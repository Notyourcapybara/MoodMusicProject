@model List<MoodMusicProject.Models.Song>
@{
    Layout = null;
    ViewData["Title"] = "Playlist";
    var mood = ViewData["Mood"]?.ToString()?.ToLower() ?? "default";
    var songToPlay = ViewData["Song"]?.ToString()?.ToLower();
    int startIndex = 0;

    if (!string.IsNullOrWhiteSpace(songToPlay))
    {
        var match = Model.FindIndex(s => s.Title.ToLower() == songToPlay);
        if (match >= 0)
        {
            startIndex = match;
        }
    }

    var initialSong = Model.ElementAtOrDefault(startIndex);
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@mood.ToUpper() Vibes</title>
    <script>
        // Èò≤Ê≠¢ API Êú™Âä†ËΩΩÈáçÂ§çÂàõÂª∫Êí≠ÊîæÂô®
        if (!window['YT']) {
            const tag = document.createElement('script');
            tag.src = "https://www.youtube.com/iframe_api";
            document.head.appendChild(tag);
        }
    </script>
    <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Baloo 2', sans-serif;
            background-color: #fffaf3;
            text-align: center;
            margin: 0;
            padding: 0;
        }

        h1 { font-size: 2.5rem; margin-top: 40px; }
        .playlist-title { font-size: 1.5rem; margin: 10px 0 10px; }
        .quote {
            font-size: 18px;
            font-style: italic;
            margin-bottom: 30px;
            color: #444;
        }

        .player {
            width: 600px;
            margin: 0 auto 40px;
            background: #ffffff;
            border-radius: 30px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
            padding: 30px;
            transition: opacity 0.5s ease;
        }

        .fade-out { opacity: 0; }
        .fade-in { opacity: 1; }

        #youtubePlayer {
            width: 100%;
            height: 340px;
            border-radius: 20px;
            border: none;
            margin-bottom: 20px;
        }

        .song-info { margin-top: 10px; }
        .bold { font-weight: bold; }

        .next-btn, .prev-btn {
            display: inline-block;
            background-color: #06d6a0;
            color: white;
            font-weight: bold;
            padding: 10px 20px;
            border-radius: 10px;
            margin: 5px;
            cursor: pointer;
            border: none;
        }

        .back-btn {
            position: absolute;
            top: 20px;
            right: 30px;
            text-decoration: none;
            background-color: #ffd166;
            color: #333;
            font-weight: bold;
            padding: 10px 20px;
            border-radius: 15px;
        }

        ul.song-list {
            list-style: none;
            padding: 0;
            margin-top: 20px;
        }

        ul.song-list li {
            font-size: 18px;
            margin: 8px 0;
            cursor: pointer;
            transition: background-color 0.3s;
            padding: 4px 10px;
            border-radius: 8px;
        }

        ul.song-list li:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        ul.song-list li.active {
            background-color: #e0fff5;
            font-weight: bold;
            color: #06d6a0;
        }

        #emptyMessage {
            font-size: 20px;
            font-weight: bold;
            color: #999;
            margin-top: 40px;
        }
    </style>
</head>
<body>
<a class="back-btn" href="/Mood/Index">‚Üê Back to Mood Selection</a>

<h1>@mood.ToUpper() Vibes</h1>
<div class="playlist-title">üéµ Playlist</div>
<div class="quote" id="quote"></div>

@if (Model.Count > 0)
{
    <div class="player fade-in" id="playerBox">
        <div id="youtubePlayer"></div>
        <div class="song-info">
            <div class="bold" id="songTitle">@initialSong?.Title</div>
            <div id="songArtist">@initialSong?.Artist</div>
        </div>
        <div>
            <button class="prev-btn" onclick="playPrevious()">‚óÄ Previous Song</button>
            <button class="next-btn" onclick="playNext()">Next Song ‚ñ∂</button>
        </div>
    </div>

    <ul class="song-list" id="songList">
        @for (int i = 0; i < Model.Count; i++)
        {
            var song = Model[i];
            var isActive = i == startIndex;
            <li class="@(isActive ? "active" : "")" onclick="playSongAt(@i)" id="songItem-@i">
                <span class="bold">@song.Title</span> ‚Äî @song.Artist <span class="icon" id="icon-@i">@((isActive) ? "üé∂" : "")</span>
            </li>
        }
    </ul>
}
else
{
    <div id="emptyMessage">No songs available for this mood. Please go back and add some!</div>
}

<script>
    const songs = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
    let currentIndex = @startIndex;
    let player;
    let playerReady = false;

    function extractVideoId(url) {
        if (!url) return "";
        if (url.includes("v=")) return url.split("v=")[1].split("&")[0];
        if (url.includes("youtu.be/")) return url.split("youtu.be/")[1].split("?")[0];
        return url.split("/").pop();
    }

    function highlightCurrentSong() {
        songs.forEach((_, i) => {
            const li = document.getElementById(`songItem-${i}`);
            const icon = document.getElementById(`icon-${i}`);
            if (li && icon) {
                li.classList.toggle("active", i === currentIndex);
                icon.textContent = i === currentIndex ? "üé∂" : "";
            }
        });
    }

    function updatePlayerWithTransition(song) {
        if (!playerReady || !song || !song.YoutubeUrl) return;
        const box = document.getElementById("playerBox");
        box.classList.remove("fade-in");
        box.classList.add("fade-out");

        setTimeout(() => {
            const videoId = extractVideoId(song.YoutubeUrl);
            player.loadVideoById(videoId);
            document.getElementById("songTitle").textContent = song.Title;
            document.getElementById("songArtist").textContent = song.Artist;
            box.classList.remove("fade-out");
            box.classList.add("fade-in");
            highlightCurrentSong();
        }, 400);
    }

    function playNext() {
        if (!playerReady || !songs.length) return;
        currentIndex = (currentIndex + 1) % songs.length;
        updatePlayerWithTransition(songs[currentIndex]);
    }

    function playPrevious() {
        if (!playerReady || !songs.length) return;
        currentIndex = (currentIndex - 1 + songs.length) % songs.length;
        updatePlayerWithTransition(songs[currentIndex]);
    }

    function playSongAt(index) {
        if (!playerReady || index < 0 || index >= songs.length) return;
        currentIndex = index;
        updatePlayerWithTransition(songs[currentIndex]);
    }

    function initYouTubePlayer() {
        if (!songs.length) return;

        const initialVideoId = extractVideoId(songs[currentIndex]?.YoutubeUrl);
        if (!initialVideoId) return;

        player = new YT.Player('youtubePlayer', {
            videoId: initialVideoId,
            events: {
                'onReady': () => {
                    playerReady = true;
                    highlightCurrentSong();
                },
                'onStateChange': event => {
                    if (event.data === YT.PlayerState.ENDED) {
                        playNext();
                    }
                }
            }
        });
    }

    function checkYTAndInit() {
        if (window.YT && YT.Player) {
            initYouTubePlayer();
        } else {
            setTimeout(checkYTAndInit, 200);
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        const mood = "@mood".toLowerCase();
        const colors = {
            happy: "#ffe282",
            sad: "#d6d5f4",
            chill: "#d6f4f0",
            energy: "#ffd3d3"
        };

        const quotes = {
            happy: "Happiness is not something ready made. It comes from your own actions.",
            sad: "Every day may not be good, but there's something good in every day.",
            chill: "Keep calm and carry on.",
            energy: "Energy and persistence conquer all things.",
            default: "Music speaks what cannot be expressed."
        };

        document.body.style.backgroundColor = colors[mood] || "#fffaf3";
        document.getElementById("quote").textContent = quotes[mood] || quotes["default"];

        checkYTAndInit();  // Âª∂ËøüÊ£ÄÊü• YouTube API ÊòØÂê¶ÂáÜÂ§áÂ•Ω
    });
</script>
</body>
</html>